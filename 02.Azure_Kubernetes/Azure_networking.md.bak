---

## 🌐 Azure CNI vs Azure CNI Overlay Networking in AKS

Kubernetes networking in AKS can be configured using either **Azure CNI (Classic)** or **Azure CNI Overlay**. Understanding the difference is critical for scaling, IP management, and connectivity with Azure services.

---

### 🔹 Azure CNI (Classic / VNet-Integrated)

- 🟢 **Pods receive IPs directly from the Azure VNet subnet**.
- 🟢 Each pod is **addressable within the VNet** (first-class IP).
- ✅ Pods can communicate **natively with Azure resources** (e.g., VMs, databases).
- ❗ Can exhaust IPs quickly in large-scale deployments.



---

### ✅ Azure CNI Overlay (Recommended for Large-Scale / Virtual Nodes)

- 🚫 Pods **do not** get IPs from VNet subnet.
- 🟢 Nodes still get IPs from VNet (e.g., 10.10.0.0/16).
- 🟢 Pods are assigned IPs from a **separate overlay CIDR** (e.g., 192.168.0.0/16).
- 🔁 **VXLAN tunneling** is used to route pod-to-pod traffic.
- 🌐 Outbound pod traffic is **NATed via the node's IP**.
- 🧠 Saves subnet IPs and supports massive scale.



> 📝 Overlay CIDR is specified during cluster creation (e.g., `--pod-cidr 100.64.0.0/16`)

---

## 💡 Example Comparison

| Feature                     | Azure CNI (Classic)      | Azure CNI Overlay             |
|----------------------------|--------------------------|-------------------------------|
| Pod IP Source              | Azure VNet subnet        | Separate overlay CIDR         |
| Pod-to-Azure Services      | Direct (native routing)  | NATed through node            |
| Pod-to-Pod Communication   | Native within subnet     | VXLAN encapsulated            |
| IP Consumption             | High                     | Low                           |
| Scale Potential            | Limited by subnet size   | Massive (>100K pods/cluster)  |
| Virtual Nodes Compatibility| ❌ No                    | ✅ Yes                         |

---

## ⚡ Virtual Nodes & Azure CNI Overlay

When you enable **Virtual Nodes**, AKS automatically switches to **Azure CNI Overlay** networking.

### 🧠 Why?

- Virtual Nodes run pods in **Azure Container Instances (ACI)** — a serverless environment.
- These pods are **not part of your VM node pool**.
- Azure CNI Overlay allows **pod burst capacity** without needing IPs from the core subnet.

### 📦 What Happens When You Enable Virtual Nodes?

| Action                                | Result                                     |
|---------------------------------------|--------------------------------------------|
| Enable Virtual Nodes in AKS           | A **Virtual Kubelet** node is created      |
| Schedule extra pods to this node      | Pods run in **ACI**, not VM-based nodes    |
| Overlay networking used automatically | Pods get IPs from overlay CIDR             |
| ACI handles the compute & network     | You only pay per second used               |

---

## ✅ Summary

| Use Case                         | Recommended Network Plugin |
|----------------------------------|----------------------------|
| High-scale deployments (>1K pods)| Azure CNI Overlay          |
| VM-only workloads, small scale   | Azure CNI Classic          |
| Using Virtual Nodes / ACI        | Azure CNI Overlay (Required) |

> 📌 Azure CNI Overlay is ideal for scaling pods while conserving IPs and enabling features like **Virtual Nodes**, **burstable compute**, and **hybrid networking**.

---

---

## 💡 Example: Azure CNI vs Azure CNI Overlay with Virtual Nodes

Understanding how pod IP allocation and networking work is essential for scaling and secure connectivity in AKS.

---

### 📘 CNI Classic Example

If you create an AKS cluster with **Azure CNI (Classic)**:

- VNet/Subnet: `10.240.0.0/16`
- Pod IPs are assigned directly from the subnet


✅ Pods can **talk directly** to services in the VNet (SQL, Redis, VMs)

---

### ✅ CNI Overlay Example

If using **Azure CNI Overlay**:

- Node IP: from VNet subnet (e.g., `10.240.0.4`)
- Pod IP: from **overlay CIDR** (e.g., `192.168.0.5`, `192.168.0.6`)
- Overlay range: `--pod-cidr 192.168.0.0/16`

🔁 Traffic between pods is encapsulated with **VXLAN**  
🌐 Outbound internet traffic is **NATed** through node IP  
🚫 Azure services **cannot directly** reach pod IPs unless **Private Endpoints/NAT rules** are configured

---

## 🚀 What Happens When You Enable Virtual Nodes?

- Virtual Nodes use **Azure Container Instances (ACI)**
- Let you **burst workloads** instantly (no VM provisioning)
- **Overlay networking is required** and enabled by default

---

## 🔧 Step-by-Step: Create AKS Cluster with Azure CNI Overlay

```bash
az aks create \
  --name aks-overlay-demo \
  --resource-group myrg \
  --network-plugin azure \
  --network-plugin-mode overlay \
  --pod-cidr 192.168.0.0/16 \
  --service-cidr 10.0.0.0/16 \
  --dns-service-ip 10.0.0.10 \
  --vnet-subnet-id /subscriptions/<SUB-ID>/resourceGroups/myrg/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/aks-subnet \
  --generate-ssh-keys

kubectl run nginx --image=nginx
kubectl get pod -o wide
kubectl exec -it nginx -- curl google.com
kubectl exec -it nginx -- ping <azure-sql-private-ip>
```
# 🌐 Kubernetes Networking & Service Discovery — Beginner to Pro

---

## 🧱 1. Kubernetes Networking Model (Flat Network)

Kubernetes networking is the system that allows **Pods to talk to each other** and to the **outside world**.

### 🔑 Core Rules of Kubernetes Networking:

1. 📦 Each **Pod gets a unique IP address**
2. 🔄 All Pods can **communicate directly** with each other — **no NAT required**
3. 🧭 Communication is **flat** — no gateways or routers between Pods
4. 🧵 **Containers in the same Pod** share the same network namespace (can use `localhost`)

---

## 📚 Topics Covered:

- ✅ What is a **Virtual Network (VNet)** in AKS
- ✅ What is a **subnet** and how `/16`, `/24` ranges work
- ✅ What are **Pod CIDR**, **Service CIDR**, and how Azure assigns them
- ✅ What is **DNS IP** and how **CoreDNS** works
- ✅ How all this relates to your **AKS VNet configuration**

---

## 🏢 Real-Life Analogy: Office Building

Think of a **Virtual Network (VNet)** as an office building in a corporate environment:

| Element        | Real World Analogy                 |
|----------------|------------------------------------|
| VNet           | Office Building                    |
| Subnet         | Rooms inside the office            |
| VMs / Nodes    | Employees in rooms                 |
| NSG / Firewall | Security Guards                    |

- Everyone inside (pods/VMs) can **communicate privately**
- **No need to go through the internet**
- Guards (**NSGs**) decide **who can enter or exit**

---

## ✅ Example Use Case: AKS + Azure SQL DB

Scenario:
- You have an AKS cluster in `aks-subnet`
- Azure SQL is in `sql-subnet`
- Both subnets are within the same VNet

💡 Want to ensure **secure, internal communication**?

### ✔️ Solution:
- Place both AKS and SQL **inside the same VNet**
- Communication happens **privately** using **private IPs**
- No public exposure, **no internet routing involved**

```plaintext
[VNet: company-network]
    ├── Subnet: aks-subnet → AKS Cluster
    └── Subnet: sql-subnet → Azure SQL DB

→ Private IP to Private IP
→ Fast, secure, no egress charges
```

# 🌐 Kubernetes Networking & Service Discovery — Beginner to Pro (Part 2–4)

---

## 🔗 PART 2: What is a Subnet?

### ✅ Basic Definition:
A **subnet** is a smaller, logical subdivision of a **Virtual Network (VNet)**. It allows better organization and isolation of networked resources.

### 🧱 Subnet Examples in an AKS Architecture:

| Subnet Name          | Purpose                              |
|----------------------|--------------------------------------|
| `aks-subnet`         | Hosts AKS nodes and Pod IPs          |
| `appgateway-subnet`  | Hosts Azure Application Gateway      |
| `database-subnet`    | Hosts Azure SQL / Database resources |

💡 Subnets help in applying **NSGs**, **routing rules**, and **segregating workloads** cleanly inside a VNet.

---

## 📐 PART 3: What is CIDR and /16, /24, /12?

### ✅ CIDR = Classless Inter-Domain Routing

CIDR determines how **many IP addresses** are available in your network/subnet.

| CIDR Notation | IP Range Size     | Example IP Range                     |
|---------------|-------------------|--------------------------------------|
| `/24`         | 256 IPs           | `10.0.0.0` → `10.0.0.255`            |
| `/16`         | 65,536 IPs        | `10.0.0.0` → `10.0.255.255`          |
| `/12`         | ~1 Million IPs    | `10.0.0.0` → `10.15.255.255`         |

> 🧠 **Why It Matters?**
> - AKS uses IPs for **VMs**, **Pods**, and **Services**
> - If you choose a **small CIDR** (e.g., `/24`), your cluster may **run out of IPs** quickly.

---

## 🐳 PART 4: How Does This Connect to AKS?

When you deploy an AKS cluster, several **network-related resources** come into play:

### 🔧 AKS Needs:

- ✅ A **subnet** to host the **worker nodes (VMs)**
- ✅ A **CIDR range** to assign IPs to **Pods** (`--pod-cidr`)
- ✅ A **CIDR range** to assign IPs to **Services** (`--service-cidr`)
- ✅ **DNS Service IP** (e.g., `10.0.0.10`) — used by **CoreDNS**
- ✅ Optional: Subnet for **Ingress Controllers** (e.g., App Gateway)

---

## 📌 Real AKS Network Parameter Example

```bash
az aks create \
  --name aks-network-demo \
  --resource-group rg-aks \
  --network-plugin azure \
  --vnet-subnet-id "/subscriptions/xxx/resourceGroups/rg-aks/providers/Microsoft.Network/virtualNetworks/vnet-demo/subnets/aks-subnet" \
  --pod-cidr 192.168.0.0/16 \
  --service-cidr 10.0.0.0/16 \
  --dns-service-ip 10.0.0.10 \
  --generate-ssh-keys
```
